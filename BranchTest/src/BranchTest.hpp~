#ifndef BRANCHTEST_H_
#define BRANCHTEST_H_

#define GROUP_SIZE 64
#define NUM_READS 256
#define WAVEFRONT 64
#define NUM_KERNELS 3

//Header Files
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include "SDKCommon.hpp"
#include "Application.hpp"
#include "CommandArgs.hpp"
#include "File.hpp"



#define NO_USE 3
#define MAX_TIME 999999999.0
//#define profile

/**
 * Bandwidth 
 * Class implements OpenCL Constant Buffer Bandwidth sample
 * Derived from Benchmark base class
 */

class Branch : public Benchmark
{
    cl_double           setupTime;      /**< Time for setting up OpenCL */
    cl_double     totalKernelTime;      /**< Time for kernel execution */
    cl_double    totalProgramTime;      /**< Time for program execution */
    cl_context            context;      /**< CL context */
    cl_device_id         *devices;      /**< CL device list */
    cl_mem	  outNullBranchBuffer;      /**< CL memory buffer */
    cl_mem	   outNonBranchBuffer;      /**< CL memory buffer */
    cl_mem    outWithBranchBuffer;      /**< CL memory buffer */
    cl_mem    outWithBranchBuffer1;      /**< CL memory buffer */
    cl_mem    outWithBranchBuffer2;      /**< CL memory buffer */
    cl_mem    outWithBranchBuffer3;      /**< CL memory buffer */
    cl_mem    outWithBranchBuffer4;      /**< CL memory buffer */
	cl_mem			 incnumBuffer;      /**< CL memory buffer */
	cl_mem     outSeqBranchBuffer;      /**< CL memory buffer */
	cl_mem  outLidSeqBranchBuffer;      /**< CL memory buffer */
	cl_mem  outGidSeqBranchBuffer;      /**< CL memory buffer */
    cl_command_queue commandQueue;      /**< CL command queue */
    cl_program            program;      /**< CL program */
    cl_kernel kernel[NUM_KERNELS];      /**< CL kernel */
    size_t          globalThreads;      /**< Specify the value of GlobalWorkSize, default = 65536 */
    size_t           localThreads;      /**< Specify the value of LocalWorkSize, default = GROUP_SIZE */

    //size_t    kernelWorkGroupSize;      /**< Group Size returned by kernel */
    int                iterations;      /**< Number of iterations for kernel execution */
    //int                vectorSize;      /**< Number of vector elements, default = 1 */
	
    //bool dynamiArgFlag;
    //bool randomArgFlag;
    //bool vec3;
    streamsdk::SDKDeviceInfo deviceInfo;  /**< Structure to store device information*/
    

    // Initialize constant buffer array with random data for random access test
    //cl_uint randomIndices[NUM_READS + GROUP_SIZE];
 
public:
    /** 
     * Constructor 
     * Initialize member variables
     * @param name name of sample (string)
     */
    Branch(std::string name): Benchmark(name)
    {
		setupTime = 0;
		totalKernelTime = 0;
		iterations = 20;
		//vectorSize = 4;
		globalThreads = 1024;
		localThreads = GROUP_SIZE;
		commandQueue = NULL;
	}

    /** 
     * Constructor 
     * Initialize member variables
     * @param name name of sample (const char*)
     */
    Branch(const char* name): Benchmark(name)
    {
		setupTime = 0;
		totalKernelTime = 0;
		iterations = 20;
		//vectorSize = 4;
		globalThreads = 1024;
		localThreads = GROUP_SIZE;
		commandQueue = NULL;
	}

    /**
     * Allocate and initialize host memory array with random values
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    //int setupConstantBandwidth();

    /**
     * OpenCL related initialisations. 
     * Set up Context, Device list, Command Queue, Memory buffers
     * Build CL kernel program executable
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    int setupCL();

    /**
     * Override from Benchmark. Initialize 
     * command line parser, add custom options
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    int initialize();

    /**
     * Override from Benchmark, Generate binary image of given kernel 
     * and exit application
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
   // int genBinaryImage();

    /**
     * Override from Benchmark, adjust width and height 
     * of execution domain, perform all sample setup
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    int setup();

    /**
     * Override from Benchmark
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    int run();

	/**
     * Set values for kernels' arguments, enqueue calls to the kernels
     * on to the command queue, wait till end of kernel execution.
     * Get kernel start and end time if timing is enabled
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    int runCLKernels(int iter);
    /**
     * Override from Benchmark
     * Cleanup memory allocations
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
    int cleanup();

    /**
     * Override from Benchmark
     * Verify against reference implementation
     * @return SDK_SUCCESS on success and SDK_FAILURE on failure
     */
	int verifyResults();

	void printStats();

	double executionTime(cl_event &event);
};


#endif
